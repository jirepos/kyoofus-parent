package com.jirepo.core.util;

import java.time.LocalDate;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/** 
 * <p>
 * 양력/음력 변환 클래스이다.  com.ibm.icu.util 패키지를 사용하여 음력을 구할 수도 있다. 전자정부 프레잌워크에서는 
 * 이 라이브러리를 사용하고 있다. 그러나 아래 내용을 참고해보면 중국과 한국의 시차 문제로 음력이 다를 수 있다고 한다. 
 * 따라서 양/음력은 이 클래스를 사용하여 구한다. 
 * <p>
 * <p>
 * 양력과 음력 변환에 이와 같은 간단한 규칙은 없다. 음력은 달의 삭망을 기준으로 만든 역법으로, 태양과 달의 운행을 정확하게 계산한 자료를 바탕으로 
 * 날짜를 정하게 된다.  즉, 지구-달-태양의 위치 변화에 따라 달라지는, 달의 모양이 기울었다(朔) 차고(望) 다시 기우는 주기인 삭망 주기(朔望週期)를 
 * 측정하여 정한다. 달의 삭망주기는 약 29.5일 이다. 이에 따라 음력 한 달은 30일(큰 달) 또는 29일(작은 달)이다.  따라서 1년 12달은 대략 354일 
 * 정도된다. 
 * <p>
 * <p>
 * 이는 양력 1년 약 365일과 다르므로, 대개 3년에 한번 같은 달이 두번 반복되는 윤달을 두어 조정하게 된다. 따라서 양력을 음력으로 변환하기 위해서는, 
 * 음력의 어떤 달이 큰 달인지 작은 달인지 그리고 윤달인지 평달인지 알아야 한다.  우리나라는 이 자료를 '한국천문연구원'에서 구할 수 있다.
 * ChineseCalendar는 중국의 음력이므로 한국과는 음력이 다를 수 있다. 천문연구원의 링크를 참조한다. 
 * </p>
 * <p>
 * See <a href="https://astro.kasi.re.kr/community/post/qna/2790?cPage=5&clsf_cd=qna04">한국천문연구원 사이트</a>
 * </p>
 * 
 * 결국, 우리나라 음력 변환을 위해서는 위에서 설명한 큰 달, 작은 달, 윤달에 대한 정확한 자료가 있어야 한다. 
 * 아래 한국천문연구원 사이트의 윤년/윤달 정보에 보면 이에 대한 자료를 얻을 수 있다. 
 * 현재는 2050까지의 자료만 공개하고 있다.
 * @see https://astro.kasi.re.kr/life/pageView/8
 * @see https://kangwoo.tistory.com/42
 * @see https://joongwoonc.tistory.com/20
 */
public class LunarDateUtils {

	/** 배열의 시작년도 */
	private static final int LUNAR_START_YEAR = 1899; 
	/** 12월 */
	private static final int DECEMBER = 12;


   /**
	 * <p>음력달 데이터</p>
	 *  1799년 부터 2100년 까지의 음력달수 데이터가 선언되어있다. 
	 * 기준일은 1801년 1월 1일, 음력으로 1800년 11월 17일 이다. 
	 * 이 배열은 음력년을 기준으로 조회해야 한다.
	 * <pre>
	 * 1 : 평달 / 작은달
	 * 2 : 평달 / 큰달
	 * 3 : 윤달일 있는 달 / 평달이 작고 윤달도 작다
	 * 4 : 윤달일 있는 달 / 평달이 작고 윤달이 크다
	 * 5 : 윤달일 있는 달 / 평달이 크고 윤달이 작다
	 * 6 : 윤달일 있는 달 / 평달과 윤달이 모두 크다
	 * </pre>
	 */
	private static final int[][] LUNA_MONTH_TABLE = {
    	// {1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2}, /* 1799 */
    	// {2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 2, 1}, /* 1800 */
    	// {1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2}, /* 1801 */ 
    	// {1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1},
    	// {2, 3, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	// {2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2},
    	// {1, 2, 1, 2, 1, 3, 2, 1, 2, 2, 2, 1},
    	// {2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1},
    	// {2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	// {1, 2, 2, 1, 5, 2, 1, 2, 1, 1, 2, 1},
    	// {2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2},
    	// {1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2},
    	// {1, 1, 5, 2, 1, 2, 2, 1, 2, 2, 1, 2}, /* 1811 */
    	// {1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 5, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2},
    	// {2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {2, 2, 1, 2, 1, 5, 1, 2, 1, 2, 1, 2},
    	// {2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1},
    	// {2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2},
    	// {1, 2, 1, 5, 2, 2, 1, 2, 2, 1, 2, 1},
    	// {1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2},
    	// {1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2}, /* 1821 */
    	// {2, 1, 5, 1, 1, 2, 1, 2, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 2, 1, 4, 1, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	// {1, 1, 2, 3, 2, 1, 2, 2, 1, 2, 2, 2},
    	// {1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2}, /* 1831 */
    	// {1, 2, 1, 2, 1, 1, 2, 1, 5, 2, 2, 2},
    	// {1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	// {1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 5, 1, 2, 2, 1, 2, 2, 1, 2},
    	// {1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	// {1, 2, 4, 1, 1, 2, 1, 2, 1, 2, 2, 1},   /* 1841 */
    	// {2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 2, 2, 1, 2, 1, 4, 1, 2, 1, 2, 1},
    	// {2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 1, 5, 2, 1, 2, 2, 1, 2, 1},
    	// {2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2},
    	// {1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 1, 2, 3, 2, 1, 2, 1, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2},
    	// {2, 2, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2},   /* 1851 */
    	// {2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2},
    	// {2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2},
    	// {1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1},
    	// {2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2},
    	// {1, 2, 1, 1, 5, 2, 1, 2, 1, 2, 2, 2},
    	// {1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	// {2, 1, 6, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	// {1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2},   /* 1861 */
    	// {2, 1, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2},
    	// {1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2},
    	// {1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	// {2, 1, 1, 2, 4, 1, 2, 2, 1, 2, 2, 1},
    	// {2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2},
    	// {1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2},
    	// {1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2, 1},
    	// {2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1},
    	// {2, 2, 2, 1, 2, 1, 2, 1, 1, 5, 2, 1},
    	// {2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2},   /* 1871 */
    	// {1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2},
    	// {1, 1, 2, 1, 2, 4, 2, 1, 2, 2, 1, 2},
    	// {1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1},
    	// {2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1, 2},
    	// {2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	// {2, 2, 4, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2},
        // // 1881년 1월 30일은 음력 1881년 1월 1일 
    	// {1, 2, 1, 2, 1, 2, 5, 2, 2, 1, 2, 1},   /* 1881 */
    	// {1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	// {1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2},
    	// {2, 1, 1, 2, 3, 2, 1, 2, 2, 1, 2, 2},
    	// {2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {2, 2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	// {2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	// {1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},   /* 1891 */
    	// {1, 1, 2, 1, 1, 5, 2, 2, 1, 2, 2, 2},
    	// {1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	// {1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	// {2, 1, 2, 1, 5, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	// {1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1},
    	// {2, 1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2},  /* 1899 */
    	{1, 2, 1, 1, 2, 1, 2, 5, 2, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},   /* 1901 */
    	{2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1},
    	{2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2},
    	{1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2},
    	{1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	{2, 1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2},   /* 1911 */
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2},
    	{2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 1, 2},
    	{2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 2, 1, 1, 2, 1, 5, 2, 1, 2, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},   /* 1921 */
    	{2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2},
    	{1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1},
    	{2, 1, 2, 5, 2, 1, 2, 2, 1, 2, 1, 2},
    	{1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 5, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2},
    	{1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1},
    	{2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1},   /* 1931 */
    	{2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 2, 1, 6, 1, 2, 1, 2, 1, 1, 2},
    	{1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2},
    	{1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 4, 1, 1, 2, 2, 1, 2, 2, 2, 1},
    	{2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1},
    	{2, 2, 1, 1, 2, 1, 4, 1, 2, 2, 1, 2},
    	{2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	{2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1},   /* 1941 */
    	{2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2},
    	{2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2},
    	{2, 5, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	{2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	{2, 1, 2, 2, 1, 2, 3, 2, 1, 2, 1, 2},
    	{1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},   /* 1951 */
    	{1, 2, 1, 2, 4, 1, 2, 2, 1, 2, 1, 2},
    	{1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2},
    	{1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2},
    	{2, 1, 4, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	{2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2},
    	{1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2},   /* 1961 */
    	{1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2},
    	{1, 2, 5, 2, 1, 1, 2, 1, 1, 2, 2, 1},
    	{2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 2, 1, 5, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2},
    	{1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1, 2},   /* 1971 */
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2},
    	{2, 2, 1, 2, 1, 2, 1, 5, 1, 2, 1, 2},
    	{2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1},
    	{2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 6, 1, 2, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2},   /* 1981 */
    	{2, 1, 2, 3, 2, 1, 1, 2, 1, 2, 2, 2},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	{2, 1, 2, 2, 1, 1, 2, 1, 1, 5, 2, 2},
    	{1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1},
    	{2, 1, 2, 1, 2, 5, 2, 2, 1, 2, 1, 2},
    	{1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2},   /* 1991 */
    	{1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	{1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 1, 2, 5, 2, 1, 1, 2},
    	{1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1},
    	{2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1},
    	{2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1},
    	{2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1},
    	{2, 2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2},   /* 2001 */
    	{2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 1, 5, 2, 2, 1, 2, 2},
    	{1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2},
    	{2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2},
    	{2, 2, 1, 1, 5, 1, 2, 1, 2, 1, 2, 2},
    	{2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	{2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1},   /* 2011 */
    	{2, 1, 2, 5, 2, 2, 1, 1, 2, 1, 2, 1},
    	{2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 2, 1, 2, 1, 4, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	{2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2},
    	{2, 1, 2, 5, 2, 1, 1, 2, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1},   /* 2021 */
    	{2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2},
    	{1, 5, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1},
    	{2, 2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1},
    	{2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2},
    	{1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1},
    	{2, 1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1},   /* 2031 */
    	{2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 5, 2},
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 4, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2},
    	{2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1},
    	{2, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 1},
    	{2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2},   /* 2041 */
    	{1, 5, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2},
    	{2, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	{2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{2, 1, 2, 2, 4, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1},
    	{2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1},
    	{1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2, 1}, 
    	{2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2},   /* 2051 */
    	{1, 2, 1, 1, 2, 1, 1, 5, 2, 2, 2, 2},
    	{1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2},
    	{1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2},
    	{1, 2, 2, 1, 2, 4, 1, 1, 2, 1, 2, 1},
    	{2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1},
    	{2, 1, 2, 4, 2, 1, 2, 1, 2, 2, 1, 1},
    	{2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1},
    	{2, 2, 3, 2, 1, 1, 2, 1, 2, 2, 2, 1},   /* 2061 */
    	{2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1},
    	{2, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2},
    	{2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2},
    	{1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2},
    	{1, 2, 1, 5, 1, 2, 1, 2, 2, 2, 1, 2},
    	{2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2},
    	{2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2},   /* 2071 */
    	{2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2},
    	{2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1},
    	{2, 1, 2, 2, 1, 5, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1},
    	{2, 1, 2, 3, 2, 1, 2, 2, 2, 1, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2},
    	{1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	{2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2, 2},
    	{1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2},   /* 2081 */
    	{1, 2, 2, 2, 1, 2, 3, 2, 1, 1, 2, 2},
    	{1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1},
    	{2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2},
    	{1, 2, 1, 1, 6, 1, 2, 2, 1, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1},
    	{2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2},
    	{1, 2, 1, 5, 1, 2, 1, 1, 2, 2, 2, 1},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1},
    	{2, 2, 2, 1, 2, 1, 1, 5, 1, 2, 2, 1},
    	{2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1},   /* 2091 */
    	{2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1},
    	{1, 2, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1},
    	{2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2},
    	{1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1},
    	{2, 1, 2, 3, 2, 1, 1, 2, 2, 2, 1, 2},
    	{2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2},
    	{2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2},
    	{2, 5, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2},
    	{2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1},
    	{2, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2, 1}};

	/** 각월의 윤달정보로 LUNA_MONTH_TABLE에서 해당월의 윤달 정보 값으로 조회한다. {29 29}는 같은 달이 두 번 반복된다. */
    private static int[][] DAYS_OF_MONTH = {
        {29}, {30}, {29, 29}, {29, 30}, {30, 29}, {30, 30}
    };


    /**
     * 윤년인지 판단한다. 윤년인 경우에는 2월에 29일이 있다. 양력에서 사용한다. 
	 *  ((year % 4) == 0 && (year % 100) != 0) || (year % 400) == 0;
	 * 이 식은 윤년(2월 29일이 있는 해) 조건식인데,  4로 나누어 떨어지는 해 중 100으로 나누어 떨어지는 해는 제외하되 
	 * 400으로 나누어 떨어지는 해는 포함
	 * 2000년은 4로 나누어 떨어지고 100으로 나누어 떨어지지만 400으로 나누어 떨어지므로 윤년
     * 
     * @param year 연도
     * @return 윤년 여부
     */
    private static boolean isLeapYear(int year) {
        return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0);
    }
    /**
     * 월의 마지막 날짜를 리턴한다. 양력을 기준으로 한다. 음력의 마지막 날은 DAYS_OF_MONTH를 참조한다. 
     * @param year  연도 
     * @param month 월 
     * @return 마짐가 일수 
     */
    private static int getLastDayOfMonth(int year, int month) {
        int[] monthDay = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
        // 윤년이면 29로 변경
        monthDay[1] = isLeapYear(year) ? 29 : 28;
        return monthDay[month - 1];
    }

    /**
     * 1년 1월 1일부터 지난 날짜의 수를 구한다. 이것 사용하지 말고 java.time.Period를 사용한다. 
     * @param year 년도 
     * @param month 월 
     * @param day 일 
     * @return
     */
	@Deprecated
    private static int getTotalDay(int year, int month, int day) {
        int totalDay = (year - 1) * 365 
                  + (year - 1) / 4
                  - (year - 1) / 100 
                  + (year - 1) / 400;
        for(int i= 1; i < month; i++) {
            totalDay += getLastDayOfMonth(year, i);
        }           
        return (totalDay + day); 
    }

	/**
	 * 음력 게산을 위한 기준일자를 구한다. 음력 계산은 1799년부터 계산을 해야 하는데 
	 * 이렇게 하면 루핑이 많이 돌아 무겁기 때문에 음력 양력 매핑된 기준일자를 기준으로 주어진 날짜의 
	 * 가장 가까운 기준일부터 음력을 계산한다. 
	 * @param searchDate  음력을 구하려는 날짜 
	 * @return 기준일자 
	 */
	private static LunarDateBean getBaseLunarDate(DateBean searchDate, boolean isSolarBase){ 
	   int year = searchDate.getYear();
	   if(year <= 1950) { 
		 return (isSolarBase)
		        ? LunarDateBean.of(LocalDate.of(1900, 1, 1), LocalDate.of(1899, 12, 1)) 
		        : LunarDateBean.of(LocalDate.of(1900, 1, 1), LocalDate.of(1899, 12, 1)); 
	   }else if(year > 1950 && year <= 1970) {
		 return (isSolarBase)
		         ? LunarDateBean.of(LocalDate.of(1951, 1, 1), LocalDate.of(1950, 11, 24))
				 : LunarDateBean.of(LocalDate.of(1950, 1, 1), LocalDate.of(1949, 11, 13)); 
	   }else if(year > 1970 && year <= 1990) {
		 return LunarDateBean.of(LocalDate.of(1971, 1, 1), LocalDate.of(1970, 12, 5));
	   }else if(year > 1990 && year <= 2010) {
		 return (isSolarBase)
		         ? LunarDateBean.of(LocalDate.of(1991, 1, 1), LocalDate.of(1990, 11, 16))
				 : LunarDateBean.of(LocalDate.of(1990, 1, 1), LocalDate.of(1989, 12, 5));
	   }else if(year > 2010 && year <= 2020) {
		 return (isSolarBase)
		         ? LunarDateBean.of(LocalDate.of(2011, 1, 1), LocalDate.of(2010, 11, 27))
				 : LunarDateBean.of(LocalDate.of(2010, 1, 1), LocalDate.of(2010, 11, 17));
	   }else if(year > 2020 && year <= 2030) {
		 return (isSolarBase) 
		         ? LunarDateBean.of(LocalDate.of(2021, 1, 1), LocalDate.of(2020, 11, 18))
				 : LunarDateBean.of(LocalDate.of(2021, 1, 1), LocalDate.of(2020, 12, 7));
	   }else {
		 return (isSolarBase)
		         ? LunarDateBean.of(LocalDate.of(2031, 1, 1), LocalDate.of(2030, 12, 8))
				 : LunarDateBean.of(LocalDate.of(2030, 1, 1), LocalDate.of(2029, 11, 28));
	   }
	}//:

	/**
	 * 내부에서 사용할  Date 클래스이다. 간단히 year, month, dayOfMonth만 다룬다. 
	 */
	@Getter
	@Setter 
	@AllArgsConstructor
	@NoArgsConstructor
	private static class DateBean { 
		/** 연동 */
		private int year; 
		/** 월 */
		private int month; 
		/** 일 */
		private int dayOfMonth; 
		/** DateBean을 생성한다. */
		private static DateBean of(int year, int month, int dayOfMonth) {
			return new DateBean(year, month, dayOfMonth);
		}
		/** 비교  */
		public boolean isEqual(DateBean d){ 
			if(this.year == d.getYear() && this.month == d.getMonth() && this.dayOfMonth == d.getDayOfMonth()) {
				return true; 
			}else { 
				return false; 
			}
		}
	}

	/**
	 * LocalDate에 음력을 넣을 경우 윤년에 대한 로직으로 오류 발생한다. 
	 */
	 private static boolean isSearchDate(DateBean searchDate, boolean isSolarBase, DateBean solarDate, DateBean lunarDate) {
		if(isSolarBase) {
			return searchDate.isEqual(solarDate);
		}else {
			return searchDate.isEqual(lunarDate);
		}
	}
	

	/**
	 * 양력에 해당하는 음력을 찾으려면 양력을 입력하고 isSolarBase를 true로 설정한다. 
	 * 음력에 해당하는 양력을 찾으려면 음력을 입력하고 isSolarBase를 false로 설정한다. 
	 * 해당하는 음력이 없으면 null을 리턴한다.
	 * 
	 * @param year   찾을 년도 
	 * @param month  찾을 월 
	 * @param dayOfMonth 찾을 일 
	 * @param isSolarBase 기준일자가 양력인지 음력인지
	 * @return	조건헤 해당하는 양력, 음력
	 */
	public static LunarDateBean getSolarLunarDate(int year, int month, int dayOfMonth, boolean isSolarBase) {
		DateBean searchDate = DateBean.of(year, month, dayOfMonth);
		LunarDateBean baseDates = getBaseLunarDate(searchDate, isSolarBase); 
		int startYear = baseDates.getSolarDate().getYear(); 
		int endYear   = year; 

		// 음력 날짜 증가 변수 
		int lunarYear =  baseDates.getLunarDate().getYear();
        int lunarMonth = baseDates.getLunarDate().getMonthValue();
        int lunarDay = baseDates.getLunarDate().getDayOfMonth();

		// 음력 날짜 계산을 위한 배열의 인덱스 
		int lunarYearIndex = lunarYear - LUNAR_START_YEAR; 
        int saveLunarDaysIndex = 0; 
        int lunarMonthType     = LunarDateUtils.LUNA_MONTH_TABLE[lunarYearIndex][lunarMonth -1];    // [년][월]
        int[] lunarDays        = LunarDateUtils.DAYS_OF_MONTH[lunarMonthType-1];   // 음력의 일수 

        for(int solarYear = startYear; solarYear <= endYear; solarYear++) {
            for(int solarMonth=0; solarMonth < DECEMBER; solarMonth++) {  // 양력 월 반복 
				// 양력 달의 일수 
                int solarDaysOfMonths  = getLastDayOfMonth(solarYear, solarMonth+1);   
                
                for(int solarDay=0; solarDay < solarDaysOfMonths; solarDay++) {  // 양력 일 반복 
			
                    
					// 음력일자가 음력 기준일수보다 크면 
                    if(lunarDay > lunarDays[saveLunarDaysIndex]) { 
                        if(lunarDays.length > 1 && saveLunarDaysIndex == 0) {
                            lunarDay = 1; 
                            saveLunarDaysIndex++;
                        }else { 
                            lunarDay = 1; 
                            lunarMonth += 1; 
                            if(lunarMonth > 12) { 
                                lunarMonth = 1; 
                                lunarYear += 1; 
                            } 
                            //yearIndex = lunarYear - 1799;
                            lunarYearIndex = lunarYear - LUNAR_START_YEAR;
                            lunarMonthType   = LUNA_MONTH_TABLE[lunarYearIndex][lunarMonth -1];    // [년][월]
                            lunarDays        = DAYS_OF_MONTH[lunarMonthType-1];   // 음력의 일수 
                            saveLunarDaysIndex = 0; 
                        }
                    }
					// System.out.format("%d년, %d월 %d일 ", solarYear, solarMonth+1, solarDay+1);  // 양력 
					// System.out.format("(음력) %d년, %d월 %d일 %n", lunarYear, lunarMonth, lunarDay);
					if(isSearchDate(searchDate, isSolarBase
					   , DateBean.of(solarYear, solarMonth+1, solarDay+1)
					   , DateBean.of(lunarYear, lunarMonth, lunarDay))){
						//System.out.format("%d년, %d월 %d일 ", solarYear, solarMonth+1, solarDay+1);  // 양력 
						//System.out.format("(음력) %d년, %d월 %d일 %n", lunarYear, lunarMonth, lunarDay);
						return LunarDateBean.of(  LocalDate.of(solarYear, solarMonth+1, solarDay+1)
						      , LocalDate.of(lunarYear, lunarMonth, lunarDay)); 
					}
                    lunarDay += 1; 
                    
                }// for  solarDay 
            }// for solarMonth
        }// for solarYear

		return null; 
    }//:

}/// ~
